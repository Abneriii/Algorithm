



/*

LC.200.岛屿数量
2022.3.31:Hou:"dfs思想"，代码实现了。


*/

class Solution {

    int row;
    int column;
    public int numIslands(char[][] grid) {
    
    //遍历二维矩阵，从每一个元素1开始将其相邻的元素变为0，这样算一个陆地，重复以上过程直到将所有的元素均变为0，即得到总陆地数
    row=grid.length;
    column=grid[0].length; 
    int res=0;
    for(int i=0;i<row;i++){
        for(int j=0;j<column;j++){
            if(grid[i][j]=='1' ){
                  res++;
                continuousArea(grid,i,j);
                 
            }
     
        }

        
    }
    return res;
    }


     public  void continuousArea(char[][] grid,int x,int y){
        grid[x][y]='0';
		//查看上下左右
        if(x<row-1&&grid[x+1][y]=='1'){
            continuousArea(grid,x+1,y);
        }
        if(y<column-1&&grid[x][y+1]=='1'){
            continuousArea(grid,x,y+1);
        }
        if(y>0&&grid[x][y-1]=='1'){
            continuousArea(grid,x,y-1);
        }
        if(x>0&&grid[x-1][y]=='1'){
            continuousArea(grid,x-1,y);
        }

    }

    
}










/*

LC.739.每日温度
2022.3.26:Hou：懂了题解思路：单调栈，自己用代码实现了。

*/

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
            //单调栈思路，
            Deque<Integer> stack=new LinkedList<>();
            int[] res=new int[temperatures.length];
            for(int i=0;i<temperatures.length;i++){
                if(stack.isEmpty()){
                    stack.push(i);
                    continue;
                }
                while(!stack.isEmpty()&&temperatures[stack.peek()]<temperatures[i]){
                    int day=i-stack.peek();
                    res[stack.pop()]=day;
                    
                }
                stack.push(i);
            }
            return res;
    }
}



















public class Solution {
    /**
     *
     * 将给定数组排序。2022.3.10--冒泡排序
     * @param arr int整型一维数组 待排序的数组
     * @return int整型一维数组
     */
    public int[] MySort (int[] arr) {
        // write code here
     for(int i=arr.length-1;i>=0;i--){
         int maxIndex=0;
         for(int j=0;j<=i;j++){
             if(arr[j]>arr[maxIndex]){
                 maxIndex=j;
             }        
         }
         int help=arr[i];
         arr[i]=arr[maxIndex];
         arr[maxIndex]=help;
     }
        return arr;
    }
    
    
}



public class Solution {
    /**
     * 
     * 将给定数组排序。2022.3.10----插入排序---有错。
     * @param arr int整型一维数组 待排序的数组
     * @return int整型一维数组
     */
    public int[] MySort (int[] arr) {
        // write code here
        for(int i=1;i<=arr.length-1;i++){
            int flag=i;
            for(int j=i;j>=0;j--){
                if(arr[j]<=arr[i]){
                    flag=j;
                    break;
                }
            }
            //将flag后的元素都往后移一个位置
            int help=i-1;
            while(help>flag){
                arr[help+1]=arr[help];
                help--;
            }
            arr[help+1]=arr[i];
            
        }
        return arr;
    }
}


public class Solution {
    /**
     * 
     * 将给定数组排序。2022.3.10--选择排序。
     * @param arr int整型一维数组 待排序的数组
     * @return int整型一维数组
     */
    public int[] MySort (int[] arr) {
        // write code here
        for(int i=0;i<arr.length;i++){
            int min=i;
            for(int j=i;j<arr.length;j++){
                if(arr[j]<arr[min]){
                    min=j;
                }
            }
            //交换arr[i]和arr[min]
            int help=arr[i];
            arr[i]=arr[min];
            arr[min]=help;
            
        }
        return arr;    
    }
}



public class QuickSort {

//2022.3.11快排，没通过牛客，但是自己的用例是对的，不知为啥，不知道是不是自己算法有误。
    public  static  void main(String[] argu){
        int[]a={1,3,2,4,3,2,6,7,56,100,222};
        System.out.println(findKth(a,11,8));
        for(int num:a){
            System.out.println(num);
        }


    }
    public static int findKth(int[] a, int n, int K) {
        // write code here

        quicksort(a,0,a.length-1);
        return a[K-1];

    }

    public static  void quicksort(int[] a,int leftandFlag,int right){
        if(leftandFlag<right){
            int j=partition(a,leftandFlag,right);
            quicksort(a,0,j-1);
            quicksort(a,j+1,right);
        }


    }

    public static  int partition(int[]a,int leftandFlag,int right){
        int flag=leftandFlag;
        int left=leftandFlag;
        right++;
        while(true){
            while(left<a.length-1&&a[++left]<=a[flag]){
                if(left>right) break;
            }
            while(right>0&&a[--right]>=a[flag]){
                if(right<left) break;
            }
            if(left>=right) break;
            int help=a[left];
            a[left]=a[right];
            a[right]=help;

        }
        int help=a[flag];
        a[flag]=a[right];
        a[right]=help;
        return right;

    }




}


public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {

//NC.19.连续子数组的最大和
//2022.3.11---Hou：暴力法，算法应该没问题，但是不通过，因为暴力法超时。
       int max=array[0];
        for(int i=0;i<array.length;i++){
            int maxpart=array[i];
            int sum=0;
            for(int j=i;j<array.length;j++){
                sum+=array[j];
                maxpart=Math.max(sum,maxpart);
            }
           max=Math.max(maxpart,max);
        }
        return max;
      
    }
}


/*NC.19.连续子数组的最大和
2022.3.11----不会做，看题解，别人的方法：动态规划法,感觉不错。懂了。
2022.3.12----运用动态规划法，自己代码实现了。
*/
public int FindGreatestSumOfSubArray(int[] array) {
        int[] dp = new int[array.length];
        int max = array[0];
        dp[0] = array[0];
        for(int i=1;i<array.length;i++){
            // 动态规划，状态转移方程，确定dp[i]的最大值
            dp[i] = Math.max(dp[i-1] + array[i], array[i]);
            // 每次比较，保存出现的最大值
            max = Math.max(max,dp[i]);
        }
        return max;
    }


/*
 * NC.41.最长无重复子数组
   2022.3.12：Hou："暴力算法：双重遍历，每一次申请一个Set集合，计算此过程中最大的个数"，代码通过，但此方法不好。
*/
public class Solution {
 
    public int maxLength (int[] arr) {
        // write code here
        int maxnum=0;
        for(int i=0;i<arr.length;i++){
            Set<Integer> array=new HashSet<>();
            array.add(arr[i]);
            int num=1;
            for(int j=i+1;j<arr.length;j++){
                if(!array.contains(arr[j])){
                    array.add(arr[j]);
                    num++;
                }
                else break;
            }
            maxnum=Math.max(num,maxnum);
            
        }
        return maxnum;
        
    }
    
    
}





------------------------------------------------------------------------------





 class Solution {
//LC.15.三数之和
//2022.3.13:没思路。--看题解，方法：双指针，懂了，自己实现，没通过，因为[0,0,0,0]这个特殊情况下不成立，dai修正自己的代码。

    public static  List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
            int j=i+1;
            int m=nums.length-1;
            while(j<m){
                if(nums[i]+nums[j]+nums[m]==0){
                    //加入结果集
                    List<Integer> respart=new ArrayList<>();
                    respart.add(nums[i]);
                    respart.add(nums[j]);
                    respart.add(nums[m]);
                    res.add(respart);
                }

                //将i和j移动到下一个不等于它现在的位置
                int jlastValue=nums[j];
                j++;
                while( j<nums.length&&jlastValue==nums[j]) j++;
                int mlastValue=nums[m];
                m--;
                while(m>i&&mlastValue==nums[m]) m--;


            }
        }
        return res;

    }
	
	
/*

LC.300.最长递增子序列
2022.3.19:Hou：想出了暴力方法，但是实现完后发现算法有问题。------看了题解的方法，看懂了，自己代码实现了。
*/
class Solution {

    public int lengthOfLIS(int[] nums) {
        int[] dp=new int[nums.length];
        dp[0]=1;
        for(int i=1;i<nums.length;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    dp[i]=Math.max(dp[j]+1,dp[i]);
                }
            }
        }
        Arrays.sort(dp);
        return dp[dp.length-1];
        
    }




}
	
	
/*

LC.128.最长连续序列
2022.3.19：不会。------看题解，懂了，自己代码实现了。

*/

class Solution {
    public int longestConsecutive(int[] nums) {
       if(nums.length==0) return 0;
        Arrays.sort(nums);
        Map<Integer,Integer> map=new HashMap<>();
        for(int a:nums){
            if(!map.containsKey(a)){
                map.put(a,1);
            }
            
        }
        int maxLength=1;
        for(int a:nums){
            if(map.containsKey(a-1)){
                map.put(a,map.get(a-1)+1);
                maxLength=Math.max(map.get(a-1)+1,maxLength);
            }

        }
        return maxLength;
     

    }
}






