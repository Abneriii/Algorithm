



//Hou自己想到了应该用回溯法，并自己用回溯法实现了。




//NC.BM.55 没有重复项数字的全排列
/*
2022.3.17:Hou:“遍历数组以选定第一个数字，然后对数组中剩下的数字进行全排列,这是一种递归思想。代码实现有问题，
不知道是自己这个思路有问题，还是自己代码的实现方式有问题，代码未完成”。

*/


public class Solution {
    
    //Hou:“遍历数组以选定第一个数字，然后对数组中剩下的数字进行全排列”
        
    ArrayList<ArrayList<Integer>> res= new ArrayList<>();
    public ArrayList<ArrayList<Integer>> permute(int[] num) {
         
        //遍历数组元素，选取一个作为打头数字
        ArrayList<Integer> list=new ArrayList<>();
        Arrays.sort(num);
        boolean[] used=new boolean[num.length];
        
        fullPermute(0,num,list);
        return res;
    }
    
    
    public void fullPermute(int firstNumIndex,int[] num,ArrayList<Integer> list){
        if(list.size()==num.length){
            res.add(new ArrayList(list));
            list.remove(list.size()-1);
            return; 
        }
        for(;firstNumIndex<num.length;firstNumIndex++){
            if(!list.contains(num[firstNumIndex])){
               list.add(num[firstNumIndex]);
               fullPermute(firstNumIndex,num,list);
                
                
            }
           
        }
        
        
        
        
    }
    
    
    
    
    
    
}






/*

LC.518.零钱兑换 II
2022.3.22:Hou:此题用了最初级的回溯法，提交显示的是超出内存限制，自己又测试了几个用例，结果是正确的，说明暴力方法没错，但暴力的内存太费，需要优化。；




*/
class Solution {
    //回溯法
    int count=0;
    public int change(int amount, int[] coins) {
    change(amount,0,coins);
    return count;

    }


    public void change(int amount,int index,int[] coins){
        if(amount==0){
            count++;
            return;
        }
        for(;index<coins.length;index++){
            if(coins[index]<=amount){
                change(amount-coins[index],index,coins);
            }
        }


    }
}


